args <- commandArgs()

assembly <-sub('--assembly=', '', args[grep('--assembly=', args)])
bamDir <-sub('--bamDir=', '', args[grep('--bamDir=', args)])
extLen <-sub('--extLen=', '', args[grep('--extLen=', args)])
sample <- sub('--sample=', '', args[grep('--sample=', args)])
sample <- sub('$', '.bam', sample)
multiMap <- sub('--multiMap=', '', args[grep('--multiMap=',args)])

if (identical(multiMap,character(0))){
    multiMap <- 0
}
multiMap <- as.integer(multiMap)

if (identical(extLen,character(0))){
  extLen <- 150
} else {
    extLen <- as.integer(extLen)
}

library(GenomicAlignments)
library(Rsamtools)
library(rtracklayer)
library(GenomicRanges)

print(assembly)
if ((assembly == "hg19") || (assembly == "hg38")) { organismStr <- "Hsapiens" }
if ((assembly == "mm9") || (assembly == "mm10")) { organismStr <- "Mmusculus" }
if (assembly == "sacCer3") organismStr <- "Scerevisiae"
if (assembly == "dm3") organismStr <- "Dmelanogaster"
print(organismStr)

assemblyLibrary <- paste("BSgenome.", organismStr, ".UCSC.", assembly, sep="")
print(assemblyLibrary)

library(assemblyLibrary,character.only=TRUE)

if ((assembly == "hg19") || (assembly == "hg38")) { organism <- Hsapiens }
if ((assembly == "mm9") || (assembly == "mm10")) { organism <- Mmusculus }
if (assembly == "sacCer3") organism <- Scerevisiae
if (assembly == "dm3") organism <-Dmelanogaster

#setwd to bamfile dir 
setwd(bamDir)

#----------------------------------load bamfiles-----------------------------------#
BFL <- list.files(pattern = '.bam$')
BFL <- grep(pattern=sample,BFL,value=TRUE)
BFL

param <- ScanBamParam(what='mapq',tag='NH')
multiString <- ""
if (multiMap == 1){
    multiString <- ".multi"
    print("Keeping multiply mapped reads.")
} else if (multiMap == 0){
    print("Discarding multiply mapped reads.")
}

2bam2bw <- function(BF1,BF2,organism){
    cat("opening:", BF1, sep="\n")
    bd1 <- readGAlignments(BF1)
    print (length(bd1))
    if (multiMap == 0){
        bd1 <- bd1[!values(bd1)$NH > 1]
        print("Multi-mapped hits are removed")
        print (length(bd1))
    }      
    seqlevels(bd1,force=TRUE) <- seqlevels(bd1)[grep("_",seqlevels(bd1), invert=TRUE)]
    seqlevels(bd1,force=TRUE) <- seqlevels(bd1)[grep("EBV",seqlevels(bd1), invert=TRUE)]
    cat("convert to GRanges\n")
    mygr1 <- as(bd1,"GRanges")
    if (extLen > 0){
        print(paste("extending reads to",extLen,sep=""))
        mygr1 <- resize(mygr1, extLen)
    }
    cat("getting coverage\n")
    cov1 <- coverage(mygr1)
    rpm1 <- cov1*(1e6/length(bd1))
    seqlengths(rpm1) <- seqlengths(organism)[names(rpm1)]

    cat("opening:", BF2, sep="\n")
    bd2 <- readGAlignments(BF2)
    print (length(bd2))
    if (multiMap == 0){
        bd2 <- bd2[!values(bd2)$NH > 1]
        print("Multi-mapped hits are removed")
        print (length(bd2))
    }      
    seqlevels(bd2,force=TRUE) <- seqlevels(bd2)[grep("_",seqlevels(bd2), invert=TRUE)]
    seqlevels(bd2,force=TRUE) <- seqlevels(bd2)[grep("EBV",seqlevels(bd2), invert=TRUE)]
    cat("convert to GRanges\n")
    mygr2 <- as(bd2,"GRanges")
    if (extLen > 0){
        print(paste("extending reads to",extLen,sep=""))
        mygr2 <- resize(mygr2, extLen)
    }
    cat("getting coverage\n")
    cov2 <- coverage(mygr2)
    rpm2 <- cov2*(1e6/length(bd2))
    seqlengths(rpm2) <- seqlengths(organism)[names(rpm2)]

    fc <- rpm1/rpm2
      
    ## export rpm to bigWig
    sample1 <- basename(sub(".bam", "", BF1))
    sample2 <- basename(sub(".bam", "", BF2))
    logfc <- log(fc)
    outfile <- paste(sample1,sample2,".logFC.",multiString, ".bw", sep="")
      cat(paste("exporting to bigwig", outfile, "\n", sep="\t"))
      export.bw(logfc, outfile)
      cat("export complete:", outfile, sep="\n")
  }

bam2bw <- function(BF,organism){
      cat("opening:", BF, sep="\n")
      bd <- readGAlignments(BF)
      print (length(bd))
      if (multiMap == 0){
          bd <- bd[!values(bd)$NH > 1]
          print("Multi-mapped hits are removed")
          print (length(bd))
      }      
      seqlevels(bd,force=TRUE) <- seqlevels(bd)[grep("_",seqlevels(bd), invert=TRUE)]
      seqlevels(bd,force=TRUE) <- seqlevels(bd)[grep("EBV",seqlevels(bd), invert=TRUE)]
      cat("convert to GRanges\n")
      mygr <- as(bd,"GRanges")
      if (extLen > 0){
          print(paste("extending reads to",extLen,sep=" "))
          mygr <- resize(mygr, extLen)
      }
      cat("getting coverage\n")
      # get coverage                                                            
      cov <- coverage(mygr)
      rpm <- cov*(1e6/length(bd))
      seqlengths(rpm) <- seqlengths(organism)[names(rpm)]
      ## export rpm to bigWig
      outfile <- gsub(".bam$", "", BF)
      outfile <- paste(outfile,multiString, ".bw", sep="")
      cat(paste("exporting to bigwig", outfile, "\n", sep="\t"))
      export.bw(rpm, outfile)
      cat("export complete:", BF, sep="\n")
  }


# for each element of our vector, call the bam2bw function
mclapply(B,organism=organism,2bam2bw,mc.cores=1,mc.preschedule=FALSE)
