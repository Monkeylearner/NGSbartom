#created by Clayton K. Collings, PhD
#clayton.collings@northwestern.edu
#ckcollings11@gmail.com
#usage:
#perl getWigDifference.pl a.wig b.wig x.chrom.sizes output.filename.wig
#if output.filename.wig is left blank, output = difference.wig (add .wig to this argument)
#note:
#subtracts b from a even though segments are different
#if b > a, value = 0
#works on wig files derived from bw track files generated by the pipeline
#convert bw track files to wig by using UCSC tool:  bigWigToWig a.bw a.wig
#convert wig track files to bw by using UCSC tool: wigToBigWig a.wig x.chrom.sizes a.bw
open(IN, $ARGV[2]);
while ($line = <IN>) {
	chomp $line;
	@line = split("\t", $line);
        $chr = $line[0];
        $end = $line[1];
	$end{$chr} = $end;
}
close(IN);
open(IN, $ARGV[0]);
while ($line = <IN>) {
	chomp $line;
	if ($line =~ /\#/) {
		next;
	} else {
		@line = split("\t", $line);
		$chr = $line[0];
		$chr_hash{$chr} = 1;
		$start = $line[1];
		$stop = $line[2];
		$value = $line[3];
		push @{$probes1starts{$chr}}, $start;
		$probes1stops{$chr}{$start} = $stop;
		$probes1values{$chr}{$start} = $value;
		push @{$probes{$chr}}, $start;
	}
}
close(IN);
open(IN, $ARGV[1]);
while ($line = <IN>) {
	chomp $line;
	if ($line =~ /\#/) {
		next;
	} else {
		@line = split("\t", $line);;
		$chr = $line[0];
		$start = $line[1];
		$stop = $line[2];
		$value = $line[3];
		push @{$probes2starts{$chr}}, $start;
		$probes2stops{$chr}{$start} = $stop;
		$probes2values{$chr}{$start} = $value;
		if ($probes1values{$chr}{$start} eq '') {
			push @{$probes{$chr}}, $start;
		}
	}
}
close(IN);
foreach $i (sort {$a cmp $b} keys %chr_hash) {
	@{$sorted_probes{$i}} = sort {$a<=>$b} @{$probes{$i}};
	@{$sorted_probes1{$i}} = sort {$a<=>$b} @{$probes1starts{$i}};
	@{$sorted_probes2{$i}} = sort {$a<=>$b} @{$probes2starts{$i}};
	$arraySize = @{$sorted_probes{$i}};
	$arraySize1 = @{$sorted_probes1{$i}};
	$arraySize2 = @{$sorted_probes2{$i}};
	print "$i	$arraySize	$arraySize1	$arraySize2\n";
	$total += $arraySize;
}
if ($ARGV[3] eq '') {
	$outfile = "difference.wig";
} else {
	$outfile = $ARGV[3];
}
open(OUT, ">$outfile");
foreach $i (sort {$a cmp $b} keys %chr_hash) {
	$count = 0;
	$count1 = 0;
	$count2 = 0;
	foreach $j (@{$sorted_probes{$i}}) {
		$count++;
		if ($probes1values{$i}{$j} eq '') {
			$temp = $probes1values{$i}{$sorted_probes1{$i}[$count1]} - $probes2values{$i}{$j};
			$x = $count1 + 1;
                        $y = $count2 + 1;
                        if ($sorted_probes1{$i}[$x] == $sorted_probes{$i}[$count]) {
                                $count1++;
                        }
                        if ($sorted_probes2{$i}[$y] == $sorted_probes{$i}[$count]) {
                                $count2++;
                        }
			if ($temp < 0) {
				$temp = 0;
			}
			if ($sorted_probes{$i}[$count] eq '') {
                                $count_error++;
                                next;
                        }
			if ($temp eq '') {
                                $count_error2++;
                                next;
                        }
			unless ($j > $end{$i} || $sorted_probes{$i}[$count] > $end{$i}) {
				print OUT "$i\t$j\t$sorted_probes{$i}[$count]\t$temp\n";
			}
		} elsif ($probes2values{$i}{$j} eq '') {
			$temp = $probes1values{$i}{$j} - $probes2values{$i}{$sorted_probes2{$i}[$count2]};
			$x = $count1 + 1;
                        $y = $count2 + 1;
                        if ($sorted_probes1{$i}[$x] == $sorted_probes{$i}[$count]) {
                                $count1++;
                        }
                        if ($sorted_probes2{$i}[$y] == $sorted_probes{$i}[$count]) {
                                $count2++;
                        }	
			if ($temp < 0) {
				$temp = 0;
			}
			if ($sorted_probes{$i}[$count] eq '') {
                                $count_error++;
                                next;
                        }
			if ($temp eq '') {
                                $count_error2++;
                                next;
                        }
			unless ($j > $end{$i} || $sorted_probes{$i}[$count] > $end{$i}) {
				print OUT "$i\t$j\t$sorted_probes{$i}[$count]\t$temp\n";
			}
		} else {
			$temp = $probes1values{$i}{$j} - $probes2values{$i}{$j};
			$x = $count1 + 1;
			$y = $count2 + 1;
			if ($sorted_probes1{$i}[$x] == $sorted_probes{$i}[$count]) {
				$count1++;
			}
			if ($sorted_probes2{$i}[$y] == $sorted_probes{$i}[$count]) {
                                $count2++;
                        }
			if ($temp < 0) {
				$temp = 0;
			}
			if ($sorted_probes{$i}[$count] eq '') {
				$count_error++;
				next;
			}
			if ($temp eq '') {
                                $count_error2++;
                                next;
                        }
			unless ($j > $end{$i} || $sorted_probes{$i}[$count] > $end{$i}) {
				print OUT "$i\t$j\t$sorted_probes{$i}[$count]\t$temp\n";
			}
		}
	}
}
#print "StopBlanks:	$count_error\n";
#print "ValueBlanks:	$count_error2\n";
